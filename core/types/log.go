// Copyright 2018 The uranus Authors
// This file is part of the uranus library.
//
// The uranus library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The uranus library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the uranus library. If not, see <http://www.gnu.org/licenses/>.

package types

import (
	"io"

	"github.com/UranusBlockStack/uranus/common/rlp"
	"github.com/UranusBlockStack/uranus/common/utils"
)

// Log represents a contract log event. These events are generated by the log opcode and stored/indexed by the node.
type Log struct {
	// Consensus fields:
	Address utils.Address `json:"address" gencodec:"required"` // address of the contract that generated the event
	Topics  []utils.Hash  `json:"topics" gencodec:"required"`  // list of topics provided by the contract.
	Data    []byte        `json:"data" gencodec:"required"`    // supplied by the contract, usually ABI-encoded

	// Derived fields. These fields are filled in by the node but not secured by consensus.
	BlockHeight      uint64     `json:"blockHeight"`                          // block in which the transaction was included
	BlockHash        utils.Hash `json:"blockHash"`                            // hash of the block in which the transaction was included
	TransactionHash  utils.Hash `json:"transactionHash" gencodec:"required"`  // hash of the transaction
	TransactionIndex uint       `json:"transactionIndex" gencodec:"required"` // index of the transaction in the block
	LogIndex         uint       `json:"logIndex" gencodec:"required"`         // index of the log in the receipt
	Removed          bool       `json:"removed"`                              // The Removed field is true if this log was reverted due to a chain reorganisation.
}

type rlpLog struct {
	Address utils.Address
	Topics  []utils.Hash
	Data    []byte
}

// EncodeRLP implements rlp.Encoder.
func (l *Log) EncodeRLP(w io.Writer) error {
	return rlp.Encode(w, rlpLog{Address: l.Address, Topics: l.Topics, Data: l.Data})
}

// DecodeRLP implements rlp.Decoder.
func (l *Log) DecodeRLP(s *rlp.Stream) error {
	dec := &rlpLog{}
	err := s.Decode(dec)
	if err == nil {
		l.Address, l.Topics, l.Data = dec.Address, dec.Topics, dec.Data
	}
	return err
}

// LogForStorage is a wrapper around a Log that flattens and parses the entire content of a log including non-consensus fields.
type LogForStorage Log

type rlpStorageLog struct {
	Address          utils.Address
	Topics           []utils.Hash
	Data             []byte
	BlockHeight      uint64
	BlockHash        utils.Hash
	TransactionHash  utils.Hash
	TransactionIndex uint
	LogIndex         uint
}

// EncodeRLP implements rlp.Encoder. The entire content of a log including non-consensus fields.
func (l *LogForStorage) EncodeRLP(w io.Writer) error {
	return rlp.Encode(w, rlpStorageLog{
		Address:          l.Address,
		Topics:           l.Topics,
		Data:             l.Data,
		BlockHeight:      l.BlockHeight,
		BlockHash:        l.BlockHash,
		TransactionHash:  l.TransactionHash,
		TransactionIndex: l.TransactionIndex,
		LogIndex:         l.LogIndex,
	})
}

// DecodeRLP implements rlp.Decoder. The entire content of a log including non-consensus fields.
func (l *LogForStorage) DecodeRLP(s *rlp.Stream) error {
	dec := &rlpStorageLog{}
	err := s.Decode(dec)
	if err == nil {
		*l = LogForStorage{
			Address:          dec.Address,
			Topics:           dec.Topics,
			Data:             dec.Data,
			BlockHeight:      dec.BlockHeight,
			BlockHash:        dec.BlockHash,
			TransactionHash:  dec.TransactionHash,
			TransactionIndex: dec.TransactionIndex,
			LogIndex:         dec.LogIndex,
		}
	}
	return err
}
